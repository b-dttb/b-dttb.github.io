<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>写一个本地消息表组件 —— 1. 写消息表</title>
    <link href="/2024/02/10/%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8%E7%BB%84%E4%BB%B6-%E2%80%94%E2%80%94-1-%E5%86%99%E6%B6%88%E6%81%AF%E8%A1%A8/"/>
    <url>/2024/02/10/%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8%E7%BB%84%E4%BB%B6-%E2%80%94%E2%80%94-1-%E5%86%99%E6%B6%88%E6%81%AF%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="设计表结构"><a href="#设计表结构" class="headerlink" title="设计表结构"></a>设计表结构</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>id</td><td>自增主键</td></tr><tr><td>message_id</td><td>消息唯一标识</td></tr><tr><td>topic</td><td>消息的topic</td></tr><tr><td>tag</td><td>消息的tag</td></tr><tr><td>status</td><td>消息发送状态，0-待发送，1-已发送，2-发送失败</td></tr><tr><td>orderly</td><td>是否有序，0-无序，1-有序</td></tr><tr><td>send_time</td><td>发送次数，业务中可以设置最大重试数</td></tr><tr><td>body</td><td>消息体</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>update_time</td><td>更新时间</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>本地消息表</tag>
      
      <tag>分布式事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写一个本地消息表组件 —— 0. 理论</title>
    <link href="/2024/01/28/%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8%E7%BB%84%E4%BB%B6-%E2%80%94%E2%80%94-0-%E7%90%86%E8%AE%BA/"/>
    <url>/2024/01/28/%E5%86%99%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8%E7%BB%84%E4%BB%B6-%E2%80%94%E2%80%94-0-%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>本地消息表是解决分布式事务的一种方式，流程如下：</p><div align=center><img src=https://s2.loli.net/2024/01/28/RTcSzYaMelNqt5p.png alt="本地消息表-vivo实现流程图.png" width=80% /></div><p style="text-align: center; font-size: 12px; color: #2C3E50">图片来源：vivo博客，https://www.cnblogs.com/vivotech/p/14193523.html</p><p>从图中我们可以看出，本地消息表组件应该包含一下几个方面：</p><ol><li>写消息表</li><li>发送MQ消息</li><li>定期扫描消息表，补发消息</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>本地消息表</tag>
      
      <tag>分布式事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ消费限流</title>
    <link href="/2024/01/20/RocketMQ%E6%B6%88%E8%B4%B9%E9%99%90%E6%B5%81/"/>
    <url>/2024/01/20/RocketMQ%E6%B6%88%E8%B4%B9%E9%99%90%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ol><li><p>在RocketMQ中一个topic会有多个messageQueue，如果是分区顺序消息的话RocketMQ保证发送端对于同一个sharding key都发送到一个messageQueue</p></li><li><p>在集群消费模式下，一个topic的某一个messageQueue与consumer是多对一的关系，并不能一对多，即多个消费者不能消费同一个messageQueue的消息</p></li></ol><div align=center><img src=https://s2.loli.net/2024/01/20/CGVpn6KDWZSEPem.png alt="RocketMQ-队列与消费者的关系" width=70% /></div>    <ol start="3"><li>如果要保证消息的顺序性，需要发送端和消费端都采用顺序的方式。反例：以上图为例，若某一个key的消息都发送到queue1中，对于consumer1是采用并发消费的方式的话并不能保证消息的顺序性，对于发送端同理</li></ol><div align=center><img src=https://s2.loli.net/2024/01/20/keMqScfy4JYNZWd.png alt="RocketMQ-生产顺序性和消费顺序性组合" width=80% /></div><h2 id="积压原因"><a href="#积压原因" class="headerlink" title="积压原因"></a>积压原因</h2><p>上游发消息发的是顺序消息，且短时间内可能有大量的消息过来</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>增加队列、增加消费者</li><li>提高消费者机器的配置</li><li>排查消费端的性能问题，比如同步链路过长，锁的滥用等等</li></ol><h2 id="最终采用的方案-对消费端进行限制"><a href="#最终采用的方案-对消费端进行限制" class="headerlink" title="最终采用的方案-对消费端进行限制"></a>最终采用的方案-对消费端进行限制</h2><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SentinelResource(value = &quot;自定义资源名&quot;, </span><br><span class="hljs-meta">                  blockHandler = &quot;handleMsgBlockHandler&quot;, </span><br><span class="hljs-meta">                  entryType = EntryType.IN)</span><br><span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br><span class="hljs-comment">// 消费业务逻辑</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 限流降级</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> Action <span class="hljs-title function_">handleMsgBlockHandler</span><span class="hljs-params">(Message message, ConsumeContext context, BlockException ex)</span> &#123;<br><br>    log.warn(<span class="hljs-string">&quot;trigger sentinel blockHandler, msg:[&#123;&#125;]&quot;</span>, message, ex); <br>    <span class="hljs-keyword">return</span> Action.ReconsumeLater;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改消费者线程数"><a href="#修改消费者线程数" class="headerlink" title="修改消费者线程数"></a>修改消费者线程数</h3><h2 id="RocketMQ源码分析"><a href="#RocketMQ源码分析" class="headerlink" title="RocketMQ源码分析"></a>RocketMQ源码分析</h2><div align=center><img src="https://s2.loli.net/2024/01/20/KQNPvkoElcXe5Rj.png" alt="RocketMQ-消费逻辑"></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>RocketMQ官方文档 4.x，<a href="https://rocketmq.apache.org/zh/docs/4.x/">https://rocketmq.apache.org/zh/docs/4.x/</a></li><li>RocketMQ官方文档 5.0，<a href="https://rocketmq.apache.org/zh/docs/">https://rocketmq.apache.org/zh/docs/</a></li><li>RocketMQ各种变量约束建议，<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">https://rocketmq.apache.org/zh/docs/introduction/03limits</a></li><li>阿里云官方文档，<a href="https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-4-x-series/product-overview">https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-4-x-series/product-overview</a></li><li>Sentinel源码分析，<a href="https://www.javadoop.com/post/sentinel%EF%BC%8C%E8%AF%A5%E5%8D%9A%E4%B8%BB%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%9D%9E%E5%B8%B8%E5%A5%BD">https://www.javadoop.com/post/sentinel</a></li><li>Sentinel官方文档，<a href="https://sentinelguard.io/zh-cn/docs/introduction.html">https://sentinelguard.io/zh-cn/docs/introduction.html</a></li><li>RocketMQ源码分析，<a href="https://juejin.cn/user/831671752463239/posts">https://juejin.cn/user/831671752463239/posts</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
      <tag>限流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
